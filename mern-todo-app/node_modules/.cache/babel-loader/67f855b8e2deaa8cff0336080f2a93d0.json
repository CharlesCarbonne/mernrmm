{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GRIDDLE_INITIALIZED = GRIDDLE_INITIALIZED;\nexports.GRIDDLE_LOADED_DATA = GRIDDLE_LOADED_DATA;\nexports.GRIDDLE_SET_PAGE_SIZE = GRIDDLE_SET_PAGE_SIZE;\nexports.GRIDDLE_SET_PAGE = GRIDDLE_SET_PAGE;\nexports.GRIDDLE_SET_FILTER = GRIDDLE_SET_FILTER;\nexports.GRIDDLE_SET_SORT = GRIDDLE_SET_SORT;\nexports.GRIDDLE_TOGGLE_SETTINGS = GRIDDLE_TOGGLE_SETTINGS;\nexports.GRIDDLE_TOGGLE_COLUMN = GRIDDLE_TOGGLE_COLUMN;\nexports.GRIDDLE_UPDATE_STATE = GRIDDLE_UPDATE_STATE;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _dataUtils = require('../utils/dataUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/** Sets the default render properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n *\n * TODO: Consider renaming this to be more in line with what it's actually doing (setting render properties)\n*/\n\n\nfunction GRIDDLE_INITIALIZED(initialState) {\n  var tempState = Object.assign({}, initialState);\n  tempState = (0, _dataUtils.addColumnPropertiesWhenNoneExist)(tempState); //TODO: could probably make this more efficient by removing data\n  // making the rest of the properties initial state and\n  // setting the mapped data on the new initial state immutable object\n\n  if (initialState.hasOwnProperty('data') && initialState.data.length > 0 && !initialState.data[0].hasOwnProperty('griddleKey')) {\n    tempState.data = (0, _dataUtils.transformDataToList)(initialState.data);\n  }\n\n  return _immutable2.default.fromJS(tempState);\n}\n/** Sets the griddle data\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n/*\n * State\n * ------------------\n *  data {Immutable.List} - the data that the grid is displaying\n *  loading {boolean} - is the data currently loading\n *  renderProperties {Immutable.Map} - the properties that determine how the grid should be displayed\n *  pageProperties {Immutable.Map} - the metadata for paging information\n *  .-- currentPage {int} - The current, visible page\n *  .-- pageSize {int} - The number of records to display\n *  sortProperties {Immutable.List} - the metadata surrounding sort\n *  .-- id {string} - the column id\n *  .-- sortAscending {boolean} - the direction of the sort. Index matches that of sortColumns\n **/\n\n\nfunction GRIDDLE_LOADED_DATA(state, action, helpers) {\n  return state.set('data', (0, _dataUtils.transformDataToList)(action.data)).set('loading', false);\n}\n/** Sets the current page size\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_PAGE_SIZE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], 1).setIn(['pageProperties', 'pageSize'], action.pageSize);\n}\n/** Sets the current page\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_PAGE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], action.pageNumber);\n}\n/** Sets the filter\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_FILTER(state, action) {\n  return state.set('filter', action.filter);\n}\n/** Sets sort properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_SORT(state, action) {\n  // turn this into an array if it's not already\n  var sortProperties = action.sortProperties.hasOwnProperty('length') ? action.sortProperties : [action.sortProperties];\n  return state.set('sortProperties', new _immutable2.default.fromJS(sortProperties));\n}\n/** Sets the settings visibility to true / false depending on the current property\n */\n\n\nfunction GRIDDLE_TOGGLE_SETTINGS(state, action) {\n  // if undefined treat as if it's false\n  var showSettings = state.get('showSettings') || false;\n  return state.set('showSettings', !showSettings);\n}\n\nfunction GRIDDLE_TOGGLE_COLUMN(state, action) {\n  // flips the visible state if the column property exists\n  return state.getIn(['renderProperties', 'columnProperties', action.columnId]) ? state.setIn(['renderProperties', 'columnProperties', action.columnId, 'visible'], !state.getIn(['renderProperties', 'columnProperties', action.columnId, 'visible'])) : // if the columnProperty doesn't exist, create a new one and set the property to true\n  state.setIn(['renderProperties', 'columnProperties', action.columnId], new _immutable2.default.Map({\n    id: action.columnId,\n    visible: true\n  }));\n}\n\nfunction GRIDDLE_UPDATE_STATE(state, action) {\n  var data = (0, _dataUtils.transformDataToList)(action.newState.data);\n\n  var newState = _lodash2.default.omit(action.newState, data);\n\n  return state.mergeDeep(_immutable2.default.fromJS(newState)).set('data', data);\n}","map":null,"metadata":{},"sourceType":"script"}