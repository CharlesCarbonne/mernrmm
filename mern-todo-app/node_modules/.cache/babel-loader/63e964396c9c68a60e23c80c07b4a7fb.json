{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactRedux = require('react-redux');\n\nvar _compose = require('recompose/compose');\n\nvar _compose2 = _interopRequireDefault(_compose);\n\nvar _mapProps = require('recompose/mapProps');\n\nvar _mapProps2 = _interopRequireDefault(_mapProps);\n\nvar _getContext = require('recompose/getContext');\n\nvar _getContext2 = _interopRequireDefault(_getContext);\n\nvar _dataSelectors = require('../selectors/dataSelectors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ComposedContainerComponent = function ComposedContainerComponent(OriginalComponent) {\n  return (0, _compose2.default)((0, _getContext2.default)({\n    components: _react2.default.PropTypes.object\n  }), //TODO: Should we use withHandlers here instead? I realize that's not 100% the intent of that method\n  (0, _mapProps2.default)(function (props) {\n    return {\n      TableHeading: props.components.TableHeading,\n      TableBody: props.components.TableBody,\n      NoResults: props.components.NoResults\n    };\n  }), (0, _reactRedux.connect)(function (state, props) {\n    return {\n      visibleRows: (0, _dataSelectors.visibleRowCountSelector)(state),\n      className: (0, _dataSelectors.classNamesForComponentSelector)(state, 'Table'),\n      style: (0, _dataSelectors.stylesForComponentSelector)(state, 'Table')\n    };\n  }))(function (props) {\n    return _react2.default.createElement(OriginalComponent, props);\n  });\n};\n\nexports.default = ComposedContainerComponent;","map":null,"metadata":{},"sourceType":"script"}